import requests
from enum import Enum
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import keyboards as kb

router = Router()

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
class CurrencyEnum(str, Enum):
    USD = "USD"
    RUB = "RUB"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class CurrencyConversion(StatesGroup):
    choosing_base = State()
    choosing_target = State()
    entering_amount = State()

# /start ‚Äî –∑–∞–ø—É—Å–∫
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=kb.main_buttons
    )
    await state.set_state(CurrencyConversion.choosing_base)

# –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
@router.callback_query(F.data.in_({c.value for c in CurrencyEnum}))
async def choose_base(callback: CallbackQuery, state: FSMContext):
    await state.update_data(base=callback.data)
    await callback.answer()
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É: {callback.data}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
        reply_markup=kb.main_buttons_2
    )
    await state.set_state(CurrencyConversion.choosing_target)

# –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
@router.callback_query(F.data.in_({f"{c.value}_2" for c in CurrencyEnum}))
async def choose_target(callback: CallbackQuery, state: FSMContext):
    target_currency = callback.data.replace("_2", "")
    await state.update_data(target=target_currency)
    await callback.answer()
    await callback.message.edit_text(
        f"–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞: {target_currency}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
    )
    await state.set_state(CurrencyConversion.entering_amount)

# –í–≤–æ–¥ —Å—É–º–º—ã –∏ —Ä–∞—Å—á–µ—Ç
@router.message(CurrencyConversion.entering_amount, F.text)
async def convert_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base")
    target = data.get("target")

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        url = f"https://api.exchangerate-api.com/v4/latest/{base}"
        response = requests.get(url)
        response.raise_for_status()

        rates = response.json().get("rates", {})
        rate = rates.get(target)

        if rate:
            result = round(amount * rate, 2)
            await message.answer(f"{amount} {base} = {result} {target}")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–∞—Ö.")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    await state.clear()
